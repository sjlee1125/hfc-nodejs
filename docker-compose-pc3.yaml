version: '3.4'

networks:
  fabric:
    external:
      name: fabric

services:
  zk3:
    image: hyperledger/fabric-zookeeper
    environment:
    - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=fabric
    - ZOO_MY_ID=3
    - ZOO_SERVERS=server.1=zk1:2888:3888 server.2=zk2:2888:3888 server.3=zk3:2888:3888
    - ZOO_TICK_TIME=2000
    - ZOO_INIT_LIMIT=10
    - ZOO_SYNC_LIMIT=5
    container_name: zk3
    hostname: zk3
    ports:
      - '2181'
      - '2888'
      - '3888'
    networks:
      fabric:
        aliases:
          - zk3
    deploy:
            mode: replicated
            replicas: 1
            restart_policy:
              condition: on-failure
            placement:
                constraints:
                    - node.hostname == NAMEOFHOST
                    
  kafka2:
    image: hyperledger/fabric-kafka
    restart: always
    environment:
    - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=fabric
    - KAFKA_BROKER_ID=2
    - KAFKA_UNCLEAN_LEADER_ELECTION_ENABLE=false
    - KAFKA_MIN_INSYNC_REPLICAS=2
    - KAFKA_MESSAGE_MAX_BYTES=50000000
    - KAFKA_REPLICA_FETCH_MAX_BYTES=50000000
    - KAFKA_PRODUCER_MAX_REQUEST_SIZE=50000000
    - KAFKA_CONSUMER_MAX_PARTITION_FETCH_BYTES=50000000
    - CONNECT_PRODUCER_MAX_REQUEST_SIZE=50000000
    - CONNECT_CONSUMER_MAX_PARTITION_FETCH_BYTES=50000000
    - KAFKA_DEFAULT_REPLICATION_FACTOR=3
    - KAFKA_ZOOKEEPER_CONNECT=zk1:2181,zk2:2181,zk3:2181
    container_name: kafka2
    ports:
      - '19093:9092'
    networks:
      fabric:
        aliases:
          - kafka2
    deploy:
            mode: replicated
            replicas: 1
            restart_policy:
              condition: on-failure
            placement:
                constraints:
                    - node.hostname == NAMEOFHOST

  orderer2-example-com:
    container_name: orderer2.example.com
    image: hyperledger/fabric-orderer
    environment:
      - ORDERER_GENERAL_LOGLEVEL=DEBUG
      - ORDERER_KAFKA_VERBOSE=true
      - ORDERER_GENERAL_LISTENADDRESS=0.0.0.0
      - ORDERER_GENERAL_GENESISMETHOD=file
      - ORDERER_GENERAL_GENESISFILE=/var/hyperledger/orderer/orderer.genesis.block
      - ORDERER_GENERAL_LOCALMSPID=OrdererMSP
      - ORDERER_GENERAL_LOCALMSPDIR=/var/hyperledger/orderer/msp
      # enabled TLS
      - ORDERER_GENERAL_TLS_ENABLED=false
      - ORDERER_GENERAL_TLS_PRIVATEKEY=/var/hyperledger/orderer/tls/server.key
      - ORDERER_GENERAL_TLS_CERTIFICATE=/var/hyperledger/orderer/tls/server.crt
      - ORDERER_GENERAL_TLS_ROOTCAS=[/var/hyperledger/orderer/tls/ca.crt]
      
      #- ORDERER_GENERAL_PROFILE_ENABLED=true
      #- ORDERER_GENERAL_PROFILE_ADDRESS=orderer2.example.com:6065
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric ## orderer안붙임
    command: orderer
    volumes:
    - ./channel-artifacts/genesis.block:/var/hyperledger/orderer/orderer.genesis.block
    - ./crypto-config/ordererOrganizations/example.com/orderers/orderer2.example.com/msp:/var/hyperledger/orderer/msp
    - ./crypto-config/ordererOrganizations/example.com/orderers/orderer2.example.com/tls/:/var/hyperledger/orderer/tls
    deploy:
            mode: replicated
            replicas: 1
            restart_policy:
              condition: on-failure
            placement:
                constraints:
                    - node.hostname == NAMEOFHOST
    ports:
      - 9050:7050
      - 8065:6065
    networks:
      fabric:
        aliases:
          - orderer2.example.com